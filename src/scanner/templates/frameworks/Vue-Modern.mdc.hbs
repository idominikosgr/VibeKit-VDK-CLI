---
description: "Best practices and patterns for modern Vue.js development"
globs: ["**/*.vue", "**/*.js", "**/*.ts"]
version: "1.0.0"
lastUpdated: "{{date}}"
---

# Vue.js Best Practices

[![Framework](https://img.shields.io/badge/Framework-Vue.js-42b883)](https://vuejs.org/)
[![Version](https://img.shields.io/badge/Vue-3.x-42b883)](https://vuejs.org/)

**Modern Vue.js coding standards and patterns for {{projectName}}**

## Overview

This rule file contains best practices and patterns for developing with Vue.js in the {{projectName}} project.

{{#if complexity.level}}{{#eq complexity.level "high"}}
As a high-complexity Vue project, this codebase requires careful attention to component composition, state management, and performance optimization.
{{else}}{{#eq complexity.level "medium"}}
As a medium-complexity Vue project, this codebase follows established Vue.js patterns while maintaining a reasonable level of abstraction.
{{/eq}}{{/eq}}{{/if}}

## Architecture

### Project Structure

```
{{#if projectStructure.overview}}
{{projectStructure.overview}}
{{else}}
src/
u251cu2500 assets/          # Static assets
u251cu2500 components/      # Reusable components
u2502  u251cu2500 common/      # App-wide shared components
u2502  u2514u2500 features/    # Feature-specific components
u251cu2500 composables/     # Composition functions
u251cu2500 directives/      # Custom directives
u251cu2500 plugins/         # Vue plugins
u251cu2500 router/          # Vue Router config
u251cu2500 stores/          # Pinia/Vuex store modules
u251cu2500 utils/           # Utility functions
u251cu2500 views/           # Route-level components
u251cu2500 App.vue          # Root component
u2514u2500 main.js          # Entry point
{{/if}}
```

### Recommended Component Organization

{{#if patterns.componentPattern}}
{{#eq patterns.componentPattern "functional"}}
#### Functional Component Organization

This project uses a functional approach with composition API:

- Small, focused components
- Composables for shared logic
- Minimal component inheritance
{{else}}{{#eq patterns.componentPattern "object"}}
#### Options API Organization

This project uses the Options API with clear sections:

- props, data, computed, methods
- Clear component lifecycle management
- Parent-child component communication
{{else}}{{#eq patterns.componentPattern "hybrid"}}
#### Hybrid Component Organization

This project uses a mix of Options API and Composition API:

- Composition API for complex components and shared logic
- Options API for simpler components
{{/eq}}{{/eq}}{{/eq}}
{{else}}{{#if complexity.level}}{{#eq complexity.level "high"}}
#### Recommended: Composition API with Feature-based Organization

- **Logical Concerns**: Group code by feature rather than type
- **Composables**: Extract reusable logic into composable functions
- **Script Setup**: Use `<script setup>` for cleaner component code
{{else}}
#### Recommended: Choose a Consistent Approach

- **Composition API**: More flexible, better TypeScript support, better for complex components
- **Options API**: Simpler for beginners, more structured for straightforward components
{{/eq}}{{else}}
#### Recommended: Choose a Consistent Approach

- **Composition API**: More flexible, better TypeScript support, better for complex components
- **Options API**: Simpler for beginners, more structured for straightforward components
{{/if}}{{/if}}

## ud83dudd35 Component Implementation

### Composition API (Recommended for Vue 3)

```vue
<script setup>
import { ref, computed, onMounted, onUnmounted } from 'vue';
import { useStore } from 'vuex'; // or import { useStore } from 'pinia';

// Props
const props = defineProps({
  title: {
    type: String,
    required: true
  },
  items: {
    type: Array,
    default: () => []
  }
});

// Emits
const emit = defineEmits(['select', 'update']);

// Reactive state
const count = ref(0);
const store = useStore();

// Computed properties
const doubleCount = computed(() => count.value * 2);
const storeItems = computed(() => store.state.items);

// Methods
function increment() {
  count.value++;
  emit('update', count.value);
}

function handleItemSelect(item) {
  emit('select', item);
}

// Lifecycle hooks
onMounted(() => {
  console.log('Component mounted');
});

onUnmounted(() => {
  console.log('Component unmounted');
});
</script>

<template>
  <div class="component">
    <h2>{{ title }}</h2>
    <p>Count: {{ count }} (Double: {{ doubleCount }})</p>
    <button @click="increment">Increment</button>
    
    <ul>
      <li v-for="item in items" :key="item.id" @click="handleItemSelect(item)">
        {{ item.name }}
      </li>
    </ul>
  </div>
</template>
```

### Options API (Alternative)

```vue
<script>
export default {
  name: 'FeatureComponent',
  
  props: {
    title: {
      type: String,
      required: true
    },
    items: {
      type: Array,
      default: () => []
    }
  },
  
  data() {
    return {
      count: 0
    };
  },
  
  computed: {
    doubleCount() {
      return this.count * 2;
    },
    // With Vuex
    ...mapState(['storeItems'])
  },
  
  methods: {
    increment() {
      this.count++;
      this.$emit('update', this.count);
    },
    handleItemSelect(item) {
      this.$emit('select', item);
    }
  },
  
  mounted() {
    console.log('Component mounted');
  },
  
  beforeUnmount() {
    console.log('Component will unmount');
  }
};
</script>
```

### Composition Functions (Composables)

```js
// useCounter.js
import { ref, computed } from 'vue';

export function useCounter(initialValue = 0) {
  const count = ref(initialValue);
  const doubleCount = computed(() => count.value * 2);
  
  function increment() {
    count.value++;
  }
  
  function decrement() {
    count.value--;
  }
  
  return {
    count,
    doubleCount,
    increment,
    decrement
  };
}
```

## State Management

{{#if stateManagement}}
### {{stateManagement.type}} for State Management

{{stateManagement.description}}

```js
{{stateManagement.example}}
```
{{else}}{{#if complexity.level}}{{#eq complexity.level "high"}}
### Recommended: Pinia for Large Applications

```js
// userStore.js
import { defineStore } from 'pinia';
import { apiClient } from '@/api';

export const useUserStore = defineStore('user', {
  state: () => ({
    user: null,
    loading: false,
    error: null
  }),
  
  getters: {
    isAuthenticated: (state) => !!state.user,
    username: (state) => state.user?.username
  },
  
  actions: {
    async login(credentials) {
      this.loading = true;
      this.error = null;
      
      try {
        const user = await apiClient.login(credentials);
        this.user = user;
        return user;
      } catch (error) {
        this.error = error.message;
        throw error;
      } finally {
        this.loading = false;
      }
    },
    
    logout() {
      this.user = null;
    }
  }
});

// Component usage
import { useUserStore } from '@/stores/user';

const userStore = useUserStore();
userStore.login(credentials);
```

### Or Use Composables + Provide/Inject for Targeted State

```js
// In parent component
import { provide, readonly, ref } from 'vue';

const tasks = ref([]);

function addTask(task) {
  tasks.value.push(task);
}

provide('tasks', {
  tasks: readonly(tasks), // Readonly to prevent direct mutation
  addTask
});

// In child/descendant component
import { inject } from 'vue';

const { tasks, addTask } = inject('tasks');
```
{{else}}{{#eq complexity.level "medium"}}
### Recommended: Pinia for Medium Applications

```js
// store.js
import { defineStore } from 'pinia';

export const useTaskStore = defineStore('tasks', {
  state: () => ({
    tasks: []
  }),
  
  getters: {
    completedTasks: (state) => state.tasks.filter(task => task.completed),
    incompleteTasks: (state) => state.tasks.filter(task => !task.completed)
  },
  
  actions: {
    addTask(task) {
      this.tasks.push(task);
    },
    
    toggleTask(id) {
      const task = this.tasks.find(t => t.id === id);
      if (task) task.completed = !task.completed;
    }
  }
});
```
{{else}}
### Recommended: Local State + Provide/Inject

```js
// For simple applications, use component local state
const count = ref(0);

// For shared state between components:
import { provide, readonly, ref } from 'vue';

const state = ref({ count: 0 });
function increment() {
  state.value.count++;
}

provide('counter', {
  state: readonly(state),
  increment
});
```
{{/eq}}{{/eq}}{{else}}
### State Management Options

- **Simple Apps**: Component local state and props
- **Component Trees**: Provide/Inject API
- **Medium Apps**: Pinia (recommended) or Vuex
- **Large Apps**: Pinia with modular stores

Example Pinia Store:
```js
import { defineStore } from 'pinia';

export const useCounterStore = defineStore('counter', {
  state: () => ({
    count: 0
  }),
  
  getters: {
    doubleCount: (state) => state.count * 2
  },
  
  actions: {
    increment() {
      this.count++;
    }
  }
});
```
{{/if}}{{/if}}

## Performance Optimization

{{#if complexity.level}}{{#eq complexity.level "high"}}
### Critical Performance Optimizations

- **Component Lazy Loading**: Use dynamic imports for routes and large components
- **Virtual Lists**: Use `vue-virtual-scroller` for rendering large lists
- **Memoizing Computed Properties**: Avoid expensive computations on each render
- **Keep-Alive Component**: Cache components that are expensive to re-render
- **Web Workers**: Offload heavy calculations to web workers
- **Bundle Analysis & Code Splitting**: Optimize bundle size with webpack-bundle-analyzer

```js
// Lazy loading routes
const routes = [
  {
    path: '/dashboard',
    component: () => import('./views/Dashboard.vue')
  }
];

// Keep-alive for expensive components
<keep-alive>
  <component :is="currentView" v-if="shouldRender"></component>
</keep-alive>
```

### Advanced Techniques

- **Prefetching Components**: Prefetch critical components when idle
- **Server-Side Rendering**: Consider Nuxt.js for SSR/SSG advantages
- **Custom Directives for DOM Manipulation**: Optimize repetitive DOM operations
- **Optimizing v-for with key**: Always use unique keys for list rendering
- **PurgeCSS**: Remove unused CSS from the bundle
{{else}}
### Performance Recommendations

- Use `v-once` for content that never changes
- Implement `v-memo` for optimizing re-renders of v-for lists
- Use unique keys in `v-for` directives
- Implement dynamic imports for route components
- Avoid expensive operations in computed properties
{{/eq}}{{else}}
### Performance Recommendations

- Use `v-once` for content that never changes
- Implement `v-memo` for optimizing re-renders of v-for lists
- Use unique keys in `v-for` directives
- Implement dynamic imports for route components
- Avoid expensive operations in computed properties
{{/if}}

## Recommended Patterns

### Props and Events

```vue
<script setup>
const props = defineProps({
  // Basic type check
  title: String,
  
  // More detailed validations
  status: {
    type: String,
    required: true,
    validator: value => ['active', 'pending', 'completed'].includes(value)
  },
  
  // With default value
  showDetails: {
    type: Boolean,
    default: false
  },
  
  // Object/Array defaults should be returned from a factory function
  items: {
    type: Array,
    default: () => []
  }
});

// Define emitted events
const emit = defineEmits([
  'update',
  'delete',
  'status-change'
]);

// Emit an event
function updateStatus(newStatus) {
  emit('status-change', newStatus);
}
</script>
```

### Composables for Reusable Logic

```js
// useFetch.js
import { ref, unref, isRef, watchEffect } from 'vue';

export function useFetch(url) {
  const data = ref(null);
  const error = ref(null);
  const loading = ref(false);

  function fetch() {
    data.value = null;
    error.value = null;
    loading.value = true;
    
    const urlValue = unref(url); // Handle both refs and plain values
    
    fetch(urlValue)
      .then(res => res.json())
      .then(json => {
        data.value = json;
        loading.value = false;
      })
      .catch(err => {
        error.value = err;
        loading.value = false;
      });
  }

  if (isRef(url)) {
    // Automatically re-fetch when URL changes
    watchEffect(fetch);
  } else {
    // Fetch once for static URLs
    fetch();
  }

  return { data, error, loading, refetch: fetch };
}

// Usage in component
const apiUrl = ref('https://api.example.com/data');
const { data, error, loading } = useFetch(apiUrl);
```

### Teleport for Portal Elements

```vue
<teleport to="body">
  <div v-if="modalOpen" class="modal">
    <div class="modal-content">
      <button @click="modalOpen = false">Close</button>
      <slot></slot>
    </div>
  </div>
</teleport>
```

## ud83dudcac Testing Guidelines

### Component Testing with Vue Test Utils

```js
import { mount } from '@vue/test-utils';
import MyComponent from '../MyComponent.vue';

describe('MyComponent', () => {
  it('renders correctly', () => {
    const wrapper = mount(MyComponent, {
      props: {
        title: 'Test Title',
        items: [{ id: 1, name: 'Item 1' }]
      }
    });
    
    expect(wrapper.find('h2').text()).toBe('Test Title');
    expect(wrapper.findAll('li')).toHaveLength(1);
  });
  
  it('emits select event when item is clicked', async () => {
    const wrapper = mount(MyComponent, {
      props: {
        items: [{ id: 1, name: 'Item 1' }]
      }
    });
    
    await wrapper.find('li').trigger('click');
    
    expect(wrapper.emitted('select')).toBeTruthy();
    expect(wrapper.emitted('select')[0][0]).toEqual({ id: 1, name: 'Item 1' });
  });
});
```

### Testing Composables

```js
import { useCounter } from '../composables/useCounter';

describe('useCounter', () => {
  it('increments count', () => {
    const { count, increment } = useCounter();
    expect(count.value).toBe(0);
    
    increment();
    expect(count.value).toBe(1);
  });
  
  it('computes doubleCount', () => {
    const { count, doubleCount, increment } = useCounter();
    expect(doubleCount.value).toBe(0);
    
    increment();
    expect(doubleCount.value).toBe(2);
  });
});
```

## Accessibility

- Use semantic HTML elements
- Implement ARIA attributes when necessary
- Ensure keyboard navigation works correctly
- Implement proper focus management in modals and dialogs
- Support screen readers with appropriate text alternatives
- Test with accessibility tools

## Naming Conventions

{{#with namingConventions}}
{{#if components.dominant}}
- **Components**: Use {{components.dominant}}
  - Example: `{{#ifCond components.dominant '===' 'camelCase'}}userProfile{{else}}{{#ifCond components.dominant '===' 'snake_case'}}user_profile{{else}}{{#ifCond components.dominant '===' 'PascalCase'}}UserProfile{{else}}UserProfile{{/ifCond}}{{/ifCond}}{{/ifCond}}`
{{else}}
- **Components**: Use PascalCase for component names
  - Example: `UserProfile.vue`
{{/if}}

{{#if props.dominant}}
- **Props**: Use {{props.dominant}}
  - Example: `{{#ifCond props.dominant '===' 'camelCase'}}userData{{else}}{{#ifCond props.dominant '===' 'snake_case'}}user_data{{else}}{{#ifCond props.dominant '===' 'PascalCase'}}UserData{{else}}userData{{/ifCond}}{{/ifCond}}{{/ifCond}}`
{{else}}
- **Props**: Use camelCase for props
  - Example: `userData`
{{/if}}

{{#if events.dominant}}
- **Events**: Use {{events.dominant}}
  - Example: `{{#ifCond events.dominant '===' 'camelCase'}}dataChanged{{else}}{{#ifCond events.dominant '===' 'snake_case'}}data-changed{{else}}{{#ifCond events.dominant '===' 'kebab-case'}}data-changed{{else}}dataChanged{{/ifCond}}{{/ifCond}}{{/ifCond}}`
{{else}}
- **Events**: Use kebab-case for event names
  - Example: `data-changed`
{{/if}}

{{#if stores.dominant}}
- **Stores**: Use {{stores.dominant}}
  - Example: `{{#ifCond stores.dominant '===' 'camelCase'}}userStore{{else}}{{#ifCond stores.dominant '===' 'snake_case'}}user_store{{else}}{{#ifCond stores.dominant '===' 'PascalCase'}}UserStore{{else}}userStore{{/ifCond}}{{/ifCond}}{{/ifCond}}`
{{else}}
- **Stores**: Use camelCase for store names, usually with 'Store' suffix
  - Example: `userStore`
{{/if}}
{{/with}}

## Error Handling

- Implement global error handling
- Use try/catch with async/await
- Provide user-friendly error messages
- Log errors for debugging
- Consider an error boundary component for critical sections

## Security Considerations

- Avoid using `v-html` with untrusted content (XSS risk)
- Use Vue's built-in protections against XSS
- Sanitize user inputs
- Implement proper authentication and authorization
- Keep dependencies updated
- Use HTTPS for all API calls

---

**Generated on {{date}} • [VibeKit VDK CLI](https://github.com/idominikosgr/VibeKit-VDK-CLI)**
