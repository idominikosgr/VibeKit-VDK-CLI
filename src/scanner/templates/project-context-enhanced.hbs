---
description: "Advanced project-specific context and guidance for {{projectName}}"
globs: ["**/*"]
version: "1.0.0"
lastUpdated: "{{date}}"
---

# {{projectName}} Project Context

{{#if complexity.level}}{{#eq complexity.level "high"}}
[![Complexity](https://img.shields.io/badge/Complexity-High-red)]({{repositoryUrl}})
{{else}}{{#eq complexity.level "medium"}}
[![Complexity](https://img.shields.io/badge/Complexity-Medium-yellow)]({{repositoryUrl}})
{{else}}
[![Complexity](https://img.shields.io/badge/Complexity-Low-green)]({{repositoryUrl}})
{{/eq}}{{/eq}}{{/if}}
{{#if techStack.frameworks.primary}}
[![Framework](https://img.shields.io/badge/Framework-{{techStack.frameworks.primary}}-blue)]({{repositoryUrl}})
{{/if}}
{{#if techStack.primaryLanguages}}
[![Language](https://img.shields.io/badge/Language-{{join techStack.primaryLanguages}}-green)]({{repositoryUrl}})
{{/if}}

**Project-specific guidance for working with this codebase**

## Project Overview

{{projectName}} is a {{projectPurpose}} {{#if projectScope}}focused on {{projectScope}}{{/if}}{{#if techStack.frameworks.primary}} built with {{techStack.frameworks.primary}}{{/if}}{{#if techStack.primaryLanguages}} and {{join techStack.primaryLanguages}}{{/if}}.

{{#if complexity.level}}{{#eq complexity.level "high"}}
This is a **complex project** with multiple interconnected components, sophisticated architecture, and extensive functionality. Take your time understanding the various subsystems before making significant changes.
{{else}}{{#eq complexity.level "medium"}}
This is a **moderately complex project** with clear separation of concerns and established patterns. Familiarize yourself with the main components before diving into development.
{{else}}
This is a **straightforward project** with a relatively simple structure and clear patterns. You should be able to get oriented and productive quickly.
{{/eq}}{{/eq}}{{/if}}

{{#if projectDescription}}
### Description

{{projectDescription}}
{{/if}}

{{#if projectGoals}}
### Project Goals

{{#each projectGoals}}
- {{this}}
{{/each}}
{{/if}}

## Primary Technologies

{{#if techStack}}
{{#if techStack.frameworks}}
### Frameworks & Libraries

{{#if techStack.frameworks.primary}}
- **Primary Framework**: {{techStack.frameworks.primary}}
{{/if}}
{{#if techStack.frameworks.ui}}
- **UI Framework**: {{techStack.frameworks.ui}}
{{/if}}
{{#if techStack.frameworks.api}}
- **API Framework**: {{techStack.frameworks.api}}
{{/if}}
{{#if techStack.frameworks.data}}
- **Data Layer**: {{techStack.frameworks.data}}
{{/if}}
{{#if techStack.frameworks.testing}}
- **Testing Framework**: {{techStack.frameworks.testing}}
{{/if}}
{{/if}}

{{#if techStack.primaryLanguages}}
### Languages

{{#each techStack.primaryLanguages}}
- **{{this}}**{{#if ../techStack.languageVersions}}{{#with (lookup ../techStack.languageVersions this)}} (v{{this}}){{/with}}{{/if}}
{{/each}}
{{/if}}

{{#if techStack.tooling}}
### Development Tools

{{#each techStack.tooling}}
- **{{@key}}**: {{this}}
{{/each}}
{{/if}}

{{#if techStack.databases}}
### Data Storage

{{#each techStack.databases}}
- **{{this.type}}**: {{this.name}}{{#if this.purpose}} - {{this.purpose}}{{/if}}
{{/each}}
{{/if}}

{{else}}
- **Framework**: {{projectFramework}}
- **Language**: {{projectLanguage}}
- **Additional Technologies**: {{additionalTechnologies}}
{{/if}}

## Project Structure

{{#if projectStructure.overview}}
{{projectStructure.overview}}
{{/if}}

{{#if projectStructure.directories}}
{{#if complexity.level}}{{#eq complexity.level "high"}}
### Core Directories

{{#each projectStructure.directories}}
{{#if this.isCore}}
#### `{{this.path}}`
- **Purpose**: {{this.purpose}}
{{#if this.subDirectories}}
- **Key Subdirectories**:
  {{#each this.subDirectories}}
  - `{{this.path}}`: {{this.purpose}}
  {{/each}}
{{/if}}
{{/if}}
{{/each}}

### Supporting Directories

{{#each projectStructure.directories}}
{{#unless this.isCore}}
#### `{{this.path}}`
- **Purpose**: {{this.purpose}}
{{/unless}}
{{/each}}
{{else}}
### Key Directories

{{#each projectStructure.directories}}
- **`{{this.path}}`**: {{this.purpose}}
{{/each}}
{{/eq}}{{else}}
### Key Directories

{{#each projectStructure.directories}}
- **`{{this.path}}`**: {{this.purpose}}
{{/each}}
{{/if}}
{{else}}
This project follows a standard {{projectFramework}} structure, with the following key directories:

- `/src`: Source code
- `/docs`: Documentation
- `/tests`: Test files
{{/if}}

{{#if projectStructure.entryPoints}}
### Entry Points

{{#each projectStructure.entryPoints}}
- **{{this.name}}**: `{{this.path}}` - {{this.purpose}}
{{/each}}
{{/if}}

{{#if projectStructure.buildArtifacts}}
### Build Artifacts

{{#each projectStructure.buildArtifacts}}
- **{{this.name}}**: `{{this.path}}` - {{this.purpose}}
{{/each}}
{{/if}}

## Architectural Patterns

{{#if patterns.architecture}}
{{#each patterns.architecture}}
{{> (concat this.name ".hbs")}}
{{/each}}
{{else}}
This project follows common {{projectFramework}} architectural patterns and best practices.
{{/if}}

{{#if patterns.custom}}
### Custom Patterns

{{#each patterns.custom}}
#### {{this.name}}

{{this.description}}

```{{../projectLanguage}}
{{this.example}}
```
{{/each}}
{{/if}}

## Naming Conventions

{{#if namingConventions}}
{{#with namingConventions}}
{{#if variables.dominant}}
- **Variables**: {{variables.dominant}} (e.g., `{{variables.example}}`)
{{/if}}
{{#if functions.dominant}}
- **Functions**: {{functions.dominant}} (e.g., `{{functions.example}}`)
{{/if}}
{{#if classes.dominant}}
- **Classes**: {{classes.dominant}} (e.g., `{{classes.example}}`)
{{/if}}
{{#if files.dominant}}
- **Files**: {{files.dominant}} (e.g., `{{files.example}}`)
{{/if}}
{{#if custom}}
{{#each custom}}
- **{{this.type}}**: {{this.convention}} (e.g., `{{this.example}}`)
{{/each}}
{{/if}}
{{/with}}
{{else}}
- Follow standard {{projectLanguage}} naming conventions
- Use descriptive names that reveal intent
{{/if}}

## Key Components

{{#if keyComponents}}
{{#each keyComponents}}
### {{name}}

- **Purpose**: {{purpose}}
- **Location**: `{{location}}`
- **Usage**: {{usage}}
{{#if dependencies}}
- **Dependencies**: {{join dependencies}}
{{/if}}
{{#if complexity.level}}{{#eq complexity.level "high"}}
- **Complexity**: High - Take extra care when modifying
{{/eq}}{{/if}}
{{#if codeSnippet}}

```{{../../projectLanguage}}
{{codeSnippet}}
```
{{/if}}
{{/each}}
{{else}}
Familiarize yourself with the main components of the application to understand how different parts interact.
{{/if}}

## Development Workflow

{{#if workflowGuidelines}}
{{workflowGuidelines}}
{{else}}{{#if complexity.level}}{{#eq complexity.level "high"}}
### Feature Development

1. **Branch Creation**: Create feature branches from `{{defaultBranch|default:"main/master"}}`
   ```bash
   git checkout -b feature/your-feature-name
   ```

2. **Development**:
   - Implement the feature following project architecture
   - Add comprehensive tests
   - Update documentation as needed

3. **Code Review**:
   - Create a pull request
   - Address all review comments
   - Ensure CI checks pass

4. **Testing**:
   - Unit tests must pass
   - Integration tests must pass
   - Performance tests for critical components

5. **Deployment**:
   - Merge to development branch triggers staging deployment
   - QA verification on staging
   - Release manager approves production deployment

### Release Process

- **Release Schedule**: {{releaseSchedule|default:"Bi-weekly releases"}}
- **Version Numbering**: {{versioningScheme|default:"Semantic versioning (MAJOR.MINOR.PATCH)"}}
- **Changelog**: Update CHANGELOG.md with all relevant changes

{{else}}
1. **Feature Development**: Create feature branches from `{{defaultBranch|default:"main/master"}}`
2. **Testing**: Write tests for new functionality
3. **Code Review**: All changes require review before merging
4. **Deployment**: CI/CD pipeline handles deployments
{{/eq}}{{else}}
1. **Feature Development**: Create feature branches from main/master
2. **Testing**: Write tests for new functionality
3. **Code Review**: All changes require review before merging
4. **Deployment**: CI/CD pipeline handles deployments
{{/if}}{{/if}}

{{#if cicdPipeline}}
### CI/CD Pipeline

{{#eq cicdPipeline.type "GitHub Actions"}}
This project uses **GitHub Actions** for continuous integration and deployment:

- **Workflow Files**: `.github/workflows/`
- **Main Workflows**:
  {{#each cicdPipeline.workflows}}
  - `{{this.name}}`: {{this.purpose}}
  {{/each}}
{{else}}{{#eq cicdPipeline.type "GitLab CI"}}
This project uses **GitLab CI** for continuous integration and deployment:

- **Configuration**: `.gitlab-ci.yml`
- **Main Stages**:
  {{#each cicdPipeline.stages}}
  - `{{this.name}}`: {{this.purpose}}
  {{/each}}
{{else}}{{#eq cicdPipeline.type "Jenkins"}}
This project uses **Jenkins** for continuous integration and deployment:

- **Configuration**: `Jenkinsfile`
- **Main Stages**:
  {{#each cicdPipeline.stages}}
  - `{{this.name}}`: {{this.purpose}}
  {{/each}}
{{else}}
The project uses {{cicdPipeline.type}} for continuous integration and deployment.
{{/eq}}{{/eq}}{{/eq}}
{{/if}}

## Common Tasks

{{#if commonTasks}}
{{#each commonTasks}}
### {{name}}

```{{language}}
{{example}}
```
{{/each}}
{{else}}{{#if complexity.level}}{{#eq complexity.level "high"}}
### Environment Setup

```bash
# Install dependencies
npm install

# Set up environment variables
cp .env.example .env
# Edit .env with your configuration

# Initialize the development database
npm run db:setup
```

### Running the Application

```bash
# Development mode with hot reloading
npm run dev

# Production build
npm run build
npm start
```

### Testing

```bash
# Run all tests
npm test

# Run specific test suite
npm test -- --testPathPattern=path/to/tests

# Run tests with coverage
npm run test:coverage
```

### Database Operations

```bash
# Run migrations
npm run migrate

# Create a new migration
npm run migrate:create name_of_migration

# Seed database with test data
npm run db:seed
```

{{else}}
- **Running the application**: `npm run dev` or `npm start`
- **Testing**: `npm test`
- **Building for production**: `npm run build`
{{/eq}}{{else}}
- **Running the application**: Follow framework-specific commands
- **Testing**: Use standard testing practices for {{projectFramework}}
- **Building for production**: Use optimized build process
{{/if}}{{/if}}

## Environment Configuration

{{#if environmentConfig}}
{{#if environmentConfig.variables}}
### Environment Variables

{{#each environmentConfig.variables}}
- **{{this.name}}**: {{this.purpose}} {{#if this.default}}(Default: `{{this.default}}`){{/if}}
{{/each}}
{{/if}}

{{#if environmentConfig.files}}
### Configuration Files

{{#each environmentConfig.files}}
- **`{{this.path}}`**: {{this.purpose}}
{{/each}}
{{/if}}

{{#if environmentConfig.secrets}}
### Secrets Management

{{environmentConfig.secrets.description}}
{{/if}}
{{else}}{{#if complexity.level}}{{#eq complexity.level "high"}}
### Environment Variables

Store environment variables in a `.env` file (not committed to version control):

```
NODE_ENV=development
PORT=3000
API_URL=http://localhost:8000
DATABASE_URL=postgres://user:password@localhost:5432/dbname
```

### Configuration Files

- **`config/default.js`**: Default configuration for all environments
- **`config/development.js`**: Development-specific overrides
- **`config/production.js`**: Production-specific overrides
- **`config/test.js`**: Test-specific overrides
{{else}}
Consult the README.md or .env.example for required environment variables.
{{/eq}}{{else}}
Review any .env.example files for required configuration variables.
{{/if}}{{/if}}

## Project-Specific Guidelines

{{#if projectGuidelines}}
{{projectGuidelines}}
{{else}}{{#if complexity.level}}{{#eq complexity.level "high"}}
### Coding Standards

- Follow the established code style and formatting rules
- Use TypeScript strict mode for type safety
- Write comprehensive unit tests for all new functionality
- Maintain test coverage above 80%
- Document public APIs with JSDoc comments

### Performance Considerations

- Implement proper caching strategies for expensive operations
- Use pagination for large data sets
- Optimize database queries with appropriate indexes
- Consider the performance impact of third-party libraries
- Profile and optimize critical rendering paths

### Security Best Practices

- Validate all user inputs
- Implement proper authentication and authorization
- Use parameterized queries to prevent SQL injection
- Keep dependencies up to date
- Follow the principle of least privilege

### Accessibility

- Maintain WCAG 2.1 AA compliance
- Use semantic HTML elements
- Include proper ARIA attributes
- Ensure keyboard navigation works correctly
- Test with screen readers
{{else}}
- Maintain consistent code style throughout the project
- Document public APIs and complex logic
- Keep dependencies up to date
- Follow security best practices
- Write tests for new functionality
{{/eq}}{{else}}
- Maintain consistent code style throughout the project
- Document public APIs and complex logic
- Keep dependencies up to date
- Follow security best practices
{{/if}}{{/if}}

{{#if complexity.level}}{{#eq complexity.level "high"}}
## Troubleshooting

### Common Issues

{{#if commonIssues}}
{{#each commonIssues}}
#### {{this.issue}}

{{this.solution}}

```
{{this.example}}
```
{{/each}}
{{else}}
#### Authentication Errors

Check that environment variables for authentication are correctly set in your `.env` file.

#### Database Connection Issues

Verify database credentials and ensure the database server is running:

```bash
# Check database connection
npm run db:check
```

#### Build Failures

Clear the build cache and reinstall dependencies:

```bash
rm -rf node_modules
rm -rf .cache
npm install
```
{{/if}}

### Logging

{{#if logging}}
{{logging.description}}
{{else}}
The application uses a structured logging system. Logs are written to:

- Console (development environment)
- Log files in `/logs` directory (production environment)
- Monitoring service (if configured)

Log levels: ERROR, WARN, INFO, DEBUG, TRACE
{{/if}}

### Support Resources

{{#if supportResources}}
{{#each supportResources}}
- **{{this.name}}**: {{this.description}} - {{this.url}}
{{/each}}
{{else}}
- **Documentation**: Check the `/docs` directory for detailed guides
- **Issue Tracker**: Report bugs through the project's issue tracker
- **Team Channel**: Reach out to the team through the designated communication channel
{{/if}}
{{/eq}}{{/if}}

---

**Generated on {{date}} • [VibeKit VDK CLI](https://github.com/idominikosgr/VibeKit-VDK-CLI)**
