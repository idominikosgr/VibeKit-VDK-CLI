---
description: "Project-specific context for {{projectName}}"
globs: []
alwaysApply: true
version: "2.1.0"
lastUpdated: "{{date}}"
compatibleWith: ["00-core-agent.mdc", "02-common-errors.mdc", "03-mcp-configuration.mdc"]
---

# Project Context: {{projectName}}

**AI coding assistant configuration for project-specific patterns and conventions**

## 1. Role & Responsibility

You are a project-specific context provider. Your role is to give AI assistants the necessary information about the {{projectName}} project structure, naming conventions, and architectural patterns to ensure consistent code generation and analysis.

## 2. Core Principles

- **Project Awareness**: All code should align with the project's existing structure and patterns
- **Consistency**: Follow established naming conventions and architectural patterns
- **Technology Alignment**: Use technologies compatible with the project stack
- **Structure Preservation**: Maintain the existing directory organization and file relationships

## 3. Project Technology Stack

{{#if primaryLanguages}}
### Primary Languages
{{#each primaryLanguages}}
- {{this}}
{{/each}}
{{/if}}

{{#if frameworks}}
### Frameworks
{{#each frameworks}}
- {{this}}
{{/each}}
{{/if}}

{{#if libraries}}
### Libraries
{{#each libraries}}
- {{this}}
{{/each}}
{{/if}}

{{#if testingFrameworks}}
### Testing
{{#each testingFrameworks}}
- {{this}}
{{/each}}
{{/if}}

{{#if buildTools}}
### Build Tools
{{#each buildTools}}
- {{this}}
{{/each}}
{{/if}}

## 4. Project Structure

- **Files**: {{structureStats.files}}
- **Directories**: {{structureStats.directories}}
- **File types**: {{join structureStats.fileTypes}}

{{#if architecturalPatterns}}
### Architecture

{{#each architecturalPatterns}}
- **{{this.name}}** (confidence: {{this.confidence}}%)
{{/each}}
{{/if}}

## 5. Naming Conventions

{{#with namingConventions}}
{{#if variables.dominant}}
- **Variables**: {{variables.dominant}} naming convention
{{/if}}
{{#if functions.dominant}}
- **Functions**: {{functions.dominant}} naming convention
{{/if}}
{{#if classes.dominant}}
- **Classes**: {{classes.dominant}} naming convention
{{/if}}
{{#if files.dominant}}
- **Files**: {{files.dominant}} naming convention
{{/if}}
{{#if directories.dominant}}
- **Directories**: {{directories.dominant}} naming convention
{{/if}}
{{/with}}

## 6. Best Practices

- Follow the detected naming conventions consistently
- Maintain the existing architectural pattern
- Place new files in the appropriate directories following the project structure

## 7. Response Format

```
### [Project Context Mode]
---
I'll ensure my code follows the project's established conventions:
- Using {{#with namingConventions}}{{#if variables.dominant}}{{variables.dominant}} for variables{{/if}}{{/with}}
- Following the detected {{#if architecturalPatterns}}{{architecturalPatterns.0.name}}{{else}}project{{/if}} architecture
- Maintaining consistency with existing patterns

[Implementation details that adhere to these conventions...]
```

## 8. Return Protocol

After using project context information, acknowledge with "Applied project-specific conventions from {{projectName}}."

## Important Notes

- This rule file was automatically generated by the VibeKit VDK CLI project scanner
- You may need to customize this file with additional project-specific details

---

**Generated on {{date}} â€¢ [VibeKit VDK CLI](https://github.com/idominikosgr/VibeKit-VDK-CLI)**
